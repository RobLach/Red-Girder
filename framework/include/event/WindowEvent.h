#ifndef WINDOWEVENT_H
#define WINDOWEVENT_H

#include "event/Event.h"

/** @brief Active Event.

An active event occurs when the window gains/loses mouse focus and/or input focus. 
An active event also occurs when the window is iconofied or deiconofied.  
An active event may be related to more than one of these conditions.  
For example, when a window is minimized, it will also loose mouse and input focus if it had them.
*/
class ActiveEvent : public Event { //tolua_export
public:
	//tolua_begin
	virtual std::string toString() const;

	bool gained() const;
	bool lost() const;

	/** Has the window been iconified/deiconified? 
	* @note active(), inputFocus(), and mouseFocus() are NOT mutually exclusive.
	*/
	bool active() const;

	/** Has the window gained/lost input focus? 
	* @note active(), inputFocus(), and mouseFocus() are NOT mutually exclusive.
	*/
	bool inputFocus() const;

	/** Has the window gained/lost mouse focus? 
	* @note active(), inputFocus(), and mouseFocus() are NOT mutually exclusive.
	*/
	bool mouseFocus() const;

	virtual bool isActive() const;
	//tolua_end

	virtual void copyFrom(SDL_Event &event);
private:
	unsigned int state;
	bool gain;
}; //tolua_export

/** @brief Keyboard Event.

Sent whenever a key on the keyboard is pressed or released.
*/
class KeyboardEvent : public Event { //tolua_export
public:
	//tolua_begin
	virtual std::string toString() const;

	/** Returns the keycode of the key that caused this event. */
	unsigned int key() const;

	/** Returns a string representation of the keysym. */
	std::string keyString() const;

	/** Return the character that coresponds to this event, with shift figured in, etc.*/
	std::string character() const;

	/** Was the key that caused this event pressed? */
	bool pressed() const;

	/** Was the key that caused this event released? */
	bool released() const;

	bool ctrlDown() const;
	bool shiftDown() const;
	bool altDown() const;
	bool metaDown() const;

	bool leftCtrlDown() const;
	bool leftShiftDown() const;
	bool leftAltDown() const;
	bool leftMetaDown() const;

	bool rightCtrlDown() const;
	bool rightShiftDown() const;
	bool rightAltDown() const;
	bool rightMetaDown() const;

	bool capsLockDown() const;
	bool numLockDown() const;

	virtual bool isKeyboard() const;
	//tolua_end

	virtual void copyFrom(SDL_Event &event);

private:
	unsigned int state;
	unsigned int sym;
	unsigned int mod;
	unsigned int unicode;

}; //tolua_export


/** @brief Quit Event.

A quit event, generated by the system.  Occurs whenever the user attempts to close the window.
*/
class QuitEvent : public Event { //tolua_export
public:
	//tolua_begin
	virtual std::string toString() const;

	virtual bool isQuit() const;
	//tolua_end

	virtual void copyFrom(SDL_Event &event);
}; //tolua_export

/** @brief Mouse Button Event.

Sent whenever a mouse button is pressed or released.
*/
class MouseButtonEvent : public Event { //tolua_export
public:
	//tolua_begin
	virtual std::string toString() const;

	/** Did pressing a mouse button generate this event? */
	bool pressed() const;

	/** Did releasing a mouse button generate this event? */
	bool released() const;

	/** Did the left mouse button generate this event? */
	bool left() const;

	/** Did the middle mouse button generate this event? */
	bool middle() const;

	/** Did the right mouse button generate this event? */
	bool right() const;

	/** The x coordinate of the mouse, when the event occured. */
	int x() const;

	/** The y coordinate of the mouse, when the event occured. */
	int y() const;

	virtual bool isMouseButton() const;
	//tolua_end

	virtual void copyFrom(SDL_Event &event);
private:
	unsigned int state;
	unsigned int button;
	int xCoord, yCoord;
}; // tolua_export

/** @brief Mouse Motion Event.

Sent whenever the mouse moves.
*/
class MouseMotionEvent : public Event { //tolua_export
public:
	//tolua_begin
	virtual std::string toString() const;

	bool left() const;
	bool middle() const;
	bool right() const;

	/** Absolute x position of the mouse. */
	int x() const;

	/** Absolute y position of the mouse. */
	int y() const;
	
	/** Amount the mouse has moved in the x direction since the last event. */
	int xRel() const;

	/** Amount the mouse has moved in the y direction since the last event. */
	int yRel() const;

	virtual bool isMouseMotion() const;
	//tolua_end

	Vector2 abs() const;
	Vector2 rel() const;

	virtual void copyFrom(SDL_Event &event);
private:
	unsigned int state;
	int xCoord, yCoord, xRelCoord, yRelCoord;
}; //tolua_export

#endif